import React from 'react';
import { Document, Page, Text, View, Font, PDFDownloadLink, pdf } from '@react-pdf/renderer';
import { 
  ReportData, 
  ACPerformance, 
  AssemblyData, 
  ZoneData, 
  DetailedActivity, 
  ExecutiveSummary,
  ReportMetric 
} from '../../models/reportTypes';
import { 
  PDF_STYLES, 
  FONT_CONFIG, 
  FILE_NAME_CONFIG,
  getPerformanceLevel,
  getPerformanceColor 
} from '../config/pdfConfig';

// Register custom fonts for Devanagari support
Font.register({
  family: FONT_CONFIG.family,
  fonts: [
    { src: FONT_CONFIG.sources.regular, fontWeight: 'normal' },
    { src: FONT_CONFIG.sources.bold, fontWeight: 'bold' },
  ],
});

// Performance color scheme is now imported from config

// PDF Styles
const styles = PDF_STYLES;

interface PDFReportProps {
  data: ReportData;
}

// Header Component
const ReportHeader: React.FC<{ data: ReportData }> = ({ data }) => (
  <View>
    <Text style={styles.title}>{data.header.title}</Text>
    <View style={styles.headerInfo}>
      <View style={{ flex: 1 }}>
        <Text style={styles.headerItem}>Generated: {new Date(data.header.generatedAt).toLocaleDateString()}</Text>
        <Text style={styles.headerItem}>Period: {data.header.dateRange.startDate} to {data.header.dateRange.endDate}</Text>
      </View>
      <View style={{ flex: 1 }}>
        <Text style={styles.headerItem}>Vertical: {data.header.vertical === 'shakti-abhiyaan' ? 'Shakti Abhiyaan' : 'WTM-SLP'}</Text>
        <Text style={styles.headerItem}>Generated By: {data.header.generatedBy}</Text>
      </View>
    </View>
  </View>
);

// Metrics Grid Component for AC
const ACMetricsGrid: React.FC<{ metrics: ACPerformance['metrics'] }> = ({ metrics }) => (
  <View style={styles.metricsGrid}>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Meetings</Text>
      <Text style={styles.metricValue}>{metrics.meetings}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Members</Text>
      <Text style={styles.metricValue}>{metrics.members}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Volunteers</Text>
      <Text style={styles.metricValue}>{metrics.volunteers}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Leaders</Text>
      <Text style={styles.metricValue}>{metrics.leaders}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Videos</Text>
      <Text style={styles.metricValue}>{metrics.videos}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Clubs</Text>
      <Text style={styles.metricValue}>{metrics.clubs}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Forms</Text>
      <Text style={styles.metricValue}>{metrics.forms}</Text>
    </View>
    <View style={styles.metricBox}>
      <Text style={styles.metricLabel}>Chaupals</Text>
      <Text style={styles.metricValue}>{metrics.chaupals}</Text>
    </View>
  </View>
);

// Zone Metrics Component
const ZoneMetrics: React.FC<{ metrics: ZoneData['metrics'] }> = ({ metrics }) => (
  <View style={styles.metricsGrid}>
    {metrics.map((metric: ReportMetric, idx: number) => (
      <View key={idx} style={styles.metricBox}>
        <Text style={styles.metricLabel}>{metric.name}</Text>
        <Text style={styles.metricValue}>{metric.value}</Text>
      </View>
    ))}
  </View>
);

// Detailed Activities Component (if included)
const DetailedActivitiesSection: React.FC<{ activities: DetailedActivity[] }> = ({ activities }) => {
  if (!activities || activities.length === 0) return null;
  
  return (
    <View style={styles.indentLevel1}>
      <Text style={styles.subsectionTitle}>Recent Activities (Sample)</Text>
      {activities.slice(0, 5).map((activity, idx) => (
        <View key={idx} style={styles.activityItem}>
          <Text style={styles.boldText}>{activity.type} - {activity.coordinatorName}</Text>
          <Text>Assembly: {activity.assembly}</Text>
          <Text>Date: {activity.date}</Text>
          {activity.description && <Text>{activity.description}</Text>}
        </View>
      ))}
    </View>
  );
};

// Compact AC Section Component
const ACSection: React.FC<{ ac: ACPerformance }> = ({ ac }) => {
  return (
    <View style={[
      styles.acCompactCard,
      { backgroundColor: getPerformanceColor(
        getPerformanceLevel(ac.metrics.meetings || 0),
        'dark'
      )}
    ]}>
      <Text style={styles.acNameText}>{ac.name}</Text>
      <Text style={styles.acMetricsText}>M: {ac.metrics.meetings}</Text>
      <Text style={styles.acMetricsText}>O: {ac.metrics.volunteers}</Text>
      <Text style={styles.acMetricsText}>SLP: {ac.metrics.slps}</Text>
      <Text style={styles.acMetricsText}>Vid: {ac.metrics.videos}</Text>
      <Text style={styles.acMetricsText}>C-WA: {ac.metrics.centralWaGroups}</Text>
      <Text style={styles.acMetricsText}>Forms: {ac.metrics.forms}</Text>
      <Text style={styles.acMetricsText}>WA: {ac.metrics.assemblyWaGroups}</Text>
    </View>
  );
};

// Compact Assembly Section Component
const AssemblySection: React.FC<{ assembly: AssemblyData }> = ({ assembly }) => {
  return (
    <View style={styles.assemblySection}>
      {/* Assembly Header with Metrics */}
      <View style={styles.assemblyHeader}>
        <Text>{assembly.name} - Total ACs: {assembly.totalACs}</Text>
      </View>
      
      <View style={styles.metricsGrid}>
        <View style={styles.metricBox}>
          <Text style={styles.metricLabel}>Meetings</Text>
          <Text style={styles.metricValue}>{assembly.metrics.meetings}</Text>
        </View>
        <View style={styles.metricBox}>
          <Text style={styles.metricLabel}>Volunteers</Text>
          <Text style={styles.metricValue}>{assembly.metrics.volunteers}</Text>
        </View>
        <View style={styles.metricBox}>
          <Text style={styles.metricLabel}>SLPs</Text>
          <Text style={styles.metricValue}>{assembly.metrics.slps}</Text>
        </View>
        <View style={styles.metricBox}>
          <Text style={styles.metricLabel}>Videos</Text>
          <Text style={styles.metricValue}>{assembly.metrics.videos}</Text>
        </View>
        <View style={styles.metricBox}>
          <Text style={styles.metricLabel}>Forms</Text>
          <Text style={styles.metricValue}>{assembly.metrics.forms}</Text>
        </View>
      </View>
      
      {/* No ACs Message or AC List */}
      {assembly.acs.length === 0 ? (
        <View style={{ padding: 8 }}>
          <Text style={styles.text}>No active ACs in this assembly</Text>
        </View>
      ) : (
        <View>
          {assembly.acs
            .filter(ac => ac.id !== 'no-ac-assigned') // Filter out placeholder entries
            .sort((a, b) => {
              // Sort ACs by performance (high to low) and then by name
              const perfOrder = { high: 3, moderate: 2, poor: 1 };
              const perfDiff = perfOrder[a.performanceLevel] - perfOrder[b.performanceLevel];
              return perfDiff !== 0 ? -perfDiff : a.name.localeCompare(b.name);
            })
            .map((ac: ACPerformance, idx: number) => (
              <ACSection key={`ac-${idx}`} ac={ac} />
            ))}
        </View>
      )}
    </View>
  );
};

// Zone Section Component (only show if zone is selected)
const ZoneSection: React.FC<{ zone: ZoneData; isNewPage?: boolean }> = ({ zone, isNewPage }) => (
  <View style={isNewPage ? styles.pageBreak : {}}>
    <Text style={styles.subtitle}>Zone: {zone.name}</Text>
    <Text style={styles.boldText}>Incharge: {zone.inchargeName || 'Not Assigned'} | Assemblies: {zone.totalAssemblies} | ACs: {zone.totalACs} | Active ACs: {zone.activeACs}</Text>
    <ZoneMetrics metrics={zone.metrics} />
    
    {zone.assemblies
      .sort((a, b) => {
        // Sort assemblies by their best AC performance
        const getBestPerformance = (assembly: AssemblyData) => {
          const performances = assembly.acs.map(ac => ac.performanceLevel);
          if (performances.includes('high')) return 0;
          if (performances.includes('moderate')) return 1;
          return 2;
        };
        return getBestPerformance(a) - getBestPerformance(b);
      })
      .map((assembly, assemblyIdx) => (
        <AssemblySection key={`assembly-${assemblyIdx}`} assembly={assembly} />
      ))}
  </View>
);

// Executive Summary Component
const ExecutiveSummarySection: React.FC<{ summary: ExecutiveSummary }> = ({ summary }) => (
  <View>
    <Text style={styles.subtitle}>Executive Summary</Text>
    <View style={styles.row}>
      <View style={styles.column}>
        <Text style={styles.boldText}>Total Zones: {summary.totalZones}</Text>
        <Text style={styles.boldText}>Total Assemblies: {summary.totalAssemblies}</Text>
      </View>
      <View style={styles.column}>
        <Text style={styles.boldText}>Total ACs: {summary.totalACs}</Text>
        <Text style={styles.boldText}>Total SLPs: {summary.totalSLPs}</Text>
      </View>
    </View>
    <View style={styles.row}>
      <View style={styles.column}>
        <Text style={styles.text}>Active ACs: {summary.activeACs}</Text>
        <Text style={styles.text}>Active SLPs: {summary.activeSLPs}</Text>
      </View>
      <View style={styles.column}>
        <Text style={styles.text}>High Performance: {summary.performanceSummary.high} ACs</Text>
        <Text style={styles.text}>Moderate: {summary.performanceSummary.moderate} ACs</Text>
        <Text style={styles.text}>Needs Attention: {summary.performanceSummary.poor} ACs</Text>
      </View>
    </View>
    <View style={styles.metricsGrid}>
      {summary.keyMetrics.map((metric: ReportMetric, idx: number) => (
        <View key={idx} style={styles.metricBox}>
          <Text style={styles.metricLabel}>{metric.name}</Text>
          <Text style={styles.metricValue}>{metric.value}</Text>
        </View>
      ))}
    </View>
  </View>
);

// Main PDF Document Component
const PDFReport: React.FC<PDFReportProps> = ({ data }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <ReportHeader data={data} />
      <ExecutiveSummarySection summary={data.summary} />
      
      {/* Zones Detail - only show if zones exist */}
      {data.zones && data.zones.length > 0 ? (
        data.zones.map((zone, idx) => (
          <ZoneSection key={`zone-${idx}`} zone={zone} isNewPage={idx > 0} />
        ))
      ) : (
        // Show assemblies directly if no zones
        data.summary && (
          <View>
            <Text style={styles.subtitle}>Assembly Details</Text>
            {/* This would need assembly data from summary */}
          </View>
        )
      )}
      
      {/* Detailed Activities if included */}
      {data.detailedActivities && data.detailedActivities.meetings && data.detailedActivities.meetings.length > 0 && (
        <View style={styles.pageBreak}>
          <Text style={styles.subtitle}>Sample Activities</Text>
          <DetailedActivitiesSection activities={data.detailedActivities.meetings} />
        </View>
      )}
      
      <Text style={styles.footer}>
        Bihar Congress Dashboard - {data.header.title} | Generated: {new Date(data.header.generatedAt).toLocaleDateString()}
      </Text>
    </Page>
  </Document>
);

/**
 * Generate PDF blob from report data
 */
export async function generatePDFBlob(data: ReportData): Promise<Blob> {
  console.log('[generatePDFBlob] Starting PDF generation for:', data.header.title);
  
  try {
    const blob = await pdf(<PDFReport data={data} />).toBlob();
    console.log('[generatePDFBlob] PDF generated successfully, size:', blob.size);
    return blob;
  } catch (error) {
    console.error('[generatePDFBlob] Error generating PDF:', error);
    throw error;
  }
}

/**
 * Generate and download PDF report
 */
export async function generateAndDownloadPDF(data: ReportData): Promise<void> {
  console.log('[generateAndDownloadPDF] Starting PDF generation and download');
  
  try {
    const blob = await generatePDFBlob(data);
    
    // Create download link
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    
    // Generate filename
    const timestamp = new Date().toISOString().slice(0, 10);
    const vertical = data.header.vertical === 'shakti-abhiyaan' ? 'ShaktiAbhiyaan' : 'WTMSLP';
    const dateRange = `${data.header.dateRange.startDate}_to_${data.header.dateRange.endDate}`.replace(/\//g, '-');
    link.download = `${vertical}_Report_${dateRange}_${timestamp}.pdf`;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    
    // Cleanup
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('[generateAndDownloadPDF] PDF download initiated successfully');
  } catch (error) {
    console.error('[generateAndDownloadPDF] Error during PDF generation/download:', error);
    throw error;
  }
}
