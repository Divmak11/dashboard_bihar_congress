#!/usr/bin/env node
/**
 * Script: upload-d2d-ac-slp.js
 * 
 * Purpose: Upload AC and SLP entries from d2d_valid_entries.json to Firestore
 * 
 * Features:
 *   - Filters only AC and SLP roles (excludes Saathi)
 *   - Removes _docId field (Firestore auto-generates IDs)
 *   - Batch uploads with chunking (500 docs per batch)
 *   - Progress tracking and error handling
 * 
 * Usage:
 *   $ node scripts/upload-d2d-ac-slp.js
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, writeBatch, doc } = require('firebase/firestore');
const fs = require('fs');
const path = require('path');

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyDD9RZZM8u5_Q6I24SJk1_jACFeZTGgSpw",
  authDomain: "congressdashboard-e521d.firebaseapp.com",
  projectId: "congressdashboard-e521d",
  storageBucket: "congressdashboard-e521d.firebasestorage.app",
  messagingSenderId: "561776205072",
  appId: "1:561776205072:web:003a31ab2a9def84915995"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function uploadAcSlpToFirestore() {
  console.log('🚀 Starting D2D AC & SLP Upload to Firestore\n');
  
  try {
    // Step 1: Read valid entries file
    console.log('📊 Reading d2d_valid_entries.json...');
    const validEntriesPath = path.join(__dirname, 'output', 'd2d_valid_entries.json');
    
    if (!fs.existsSync(validEntriesPath)) {
      throw new Error('d2d_valid_entries.json not found. Run import script first.');
    }
    
    const validEntries = JSON.parse(fs.readFileSync(validEntriesPath, 'utf8'));
    console.log(`   ✅ Loaded ${validEntries.length} total entries\n`);
    
    // Step 2: Filter for AC and SLP only
    console.log('🔍 Filtering for AC and SLP entries only...');
    const acSlpEntries = validEntries.filter(entry => 
      entry.role === 'AC' || entry.role === 'SLP'
    );
    
    const stats = {
      ac: acSlpEntries.filter(e => e.role === 'AC').length,
      slp: acSlpEntries.filter(e => e.role === 'SLP').length,
      total: acSlpEntries.length
    };
    
    console.log(`   ✅ Filtered entries:`);
    console.log(`      • AC:  ${stats.ac}`);
    console.log(`      • SLP: ${stats.slp}`);
    console.log(`      • Total: ${stats.total}\n`);
    
    // Step 3: Remove _docId field from each entry
    console.log('🔧 Preparing entries for upload (removing _docId)...');
    const entriesToUpload = acSlpEntries.map(entry => {
      const { _docId, ...entryWithoutDocId } = entry;
      return entryWithoutDocId;
    });
    console.log(`   ✅ Prepared ${entriesToUpload.length} entries\n`);
    
    // Step 4: Upload in batches
    console.log('📤 Starting batch upload to d2d_members collection...');
    const batchSize = 500; // Firestore batch limit
    const batches = [];
    
    for (let i = 0; i < entriesToUpload.length; i += batchSize) {
      batches.push(entriesToUpload.slice(i, i + batchSize));
    }
    
    console.log(`   📦 Created ${batches.length} batches (${batchSize} docs per batch)\n`);
    
    let uploadedCount = 0;
    let batchNumber = 0;
    
    for (const batch of batches) {
      batchNumber++;
      console.log(`   ⏳ Processing batch ${batchNumber}/${batches.length} (${batch.length} docs)...`);
      
      const firestoreBatch = writeBatch(db);
      
      for (const entry of batch) {
        // Create new document reference with auto-generated ID
        const docRef = doc(collection(db, 'd2d_members'));
        firestoreBatch.set(docRef, entry);
      }
      
      try {
        await firestoreBatch.commit();
        uploadedCount += batch.length;
        console.log(`      ✅ Batch ${batchNumber} committed successfully (${uploadedCount}/${entriesToUpload.length} total)`);
      } catch (error) {
        console.error(`      ❌ Batch ${batchNumber} failed:`, error.message);
        throw error;
      }
      
      // Small delay between batches to avoid rate limiting
      if (batchNumber < batches.length) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    // Step 5: Generate summary report
    console.log('\n' + '='.repeat(70));
    console.log('📊 UPLOAD SUMMARY');
    console.log('='.repeat(70));
    console.log(`\n✅ Successfully uploaded ${uploadedCount} entries to Firestore:`);
    console.log(`   • AC entries:  ${stats.ac}`);
    console.log(`   • SLP entries: ${stats.slp}`);
    console.log(`   • Total:       ${stats.total}`);
    console.log(`\n📁 Collection: d2d_members`);
    console.log(`📝 Document IDs: Auto-generated by Firestore`);
    console.log(`🏷️  Parent Vertical: shakti-abhiyaan`);
    
    console.log('\n' + '='.repeat(70));
    console.log('✅ Upload completed successfully!');
    console.log('='.repeat(70));
    
    console.log('\n💡 Next steps:');
    console.log('   1. Verify entries in Firebase Console');
    console.log('   2. Check d2d_members collection for uploaded data');
    console.log('   3. Test UI fetching with fetchD2DMembers.ts');
    console.log('   4. Upload Saathi entries separately if needed\n');
    
  } catch (error) {
    console.error('\n❌ Error during upload:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  uploadAcSlpToFirestore()
    .then(() => {
      console.log('\n🎉 Script execution completed!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('💥 Script failed:', error);
      process.exit(1);
    });
}

module.exports = { uploadAcSlpToFirestore };
